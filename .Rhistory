axis.title.x=element_blank())+
labs(title='Log Number of Price by Room Type', y='Log of Price')
airbnb %>%
group_by(., neighbourhood_group, availability_365) %>%
ggplot(data = ., aes(x=availability_365))+
geom_density(aes(color=neighbourhood_group))+
labs(title='Listing Density by Availability', x='Available Days per Year')+
theme(axis.text.y=element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
legend.position = c(0.52, 0.82))
airbnb %>%
group_by(., neighbourhood_group, availability_365) %>%
ggplot(data = ., aes(x=availability_365))+
geom_density(aes(color=neighbourhood_group))+
labs(title='Listing Density by Availability', x='Available Days per Year')+
theme_minimal()+
theme(axis.text.y=element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
legend.position = c(0.52, 0.82))
airbnb %>%
group_by(., neighbourhood_group, availability_365) %>%
ggplot(data = ., aes(x=availability_365))+
geom_density(aes(color=neighbourhood_group))+
labs(title='Listing Density by Availability', x='Available Days per Year')+
theme_minimal()+
theme(axis.text.y=element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
legend.position = c(0.52, 0.82))+
scale_color_discrete(name='Borough')
ggplot(data=avail_data, aes(x=availability_365)) + geom_density(aes(color=neighbourhood_group))
ggplot(data = avail_data, aes(y=availability_365, x=neighbourhood_group)) + geom_boxplot()
airbnb %>%
group_by(., neighbourhood_group, availability_365) %>%
ggplot(data = ., aes(x=reorder(neighbourhood_group, availability_365), y=availability_365))+
geom_boxplot(size=0.05)+
labs(title='Availability of Listings by Borough', y='Number of Days Available')+
theme(axis.title.x = element_blank())
airbnb %>%
group_by(., neighbourhood_group, availability_365) %>%
ggplot(data = ., aes(x=reorder(neighbourhood_group, availability_365), y=availability_365))+
geom_boxplot(size=0.1)+
labs(title='Availability of Listings by Borough', y='Number of Days Available')+
theme(axis.title.x = element_blank())
airbnb %>%
group_by(., neighbourhood_group, availability_365) %>%
ggplot(data = ., aes(x=reorder(neighbourhood_group, availability_365), y=availability_365))+
geom_boxplot(size=0.3)+
labs(title='Availability of Listings by Borough', y='Number of Days Available')+
theme(axis.title.x = element_blank())
airbnb %>%
group_by(., neighbourhood_group, room_type, price) %>%
ggplot(data = ., aes(x=room_type, y=log(price,2)))+
geom_boxplot(size=0.3)+
facet_wrap(~neighbourhood_group, ncol = 2)+
theme_minimal()+
theme(axis.text.x = element_text(angle = 55, vjust = 1,
size = 7, hjust = 1),
axis.title.x=element_blank())+
labs(title='Log Number of Price by Room Type', y='Log of Price')
airbnb %>%
group_by(.,host_id, neighbourhood_group) %>%
summarise(., tot=log(n(), 2)) %>%
filter(., tot>0) %>%
ggplot(data=., aes(x=reorder(neighbourhood_group, tot), y=tot))+
geom_boxplot(size=0.3)+
labs(title='Log Number of Listings For Single Host', y='Log of Listing Number')+
theme(axis.title.x = element_blank())
ggplot(data=avail_data, aes(x=availability_365)) + geom_density(aes(color=neighbourhood_group))
ggplot(data = avail_data, aes(y=availability_365, x=neighbourhood_group)) + geom_boxplot()
#ready for finalizing
ggplot(data = avail_data, aes(y=log(minimum_nights,2), x=neighbourhood_group)) + geom_boxplot()
airbnb %>%
group_by(., neighbourhood_group, minimum_nights) %>%
ggplot(data = ., aes(x=log(minimum_nights, 2)))+
geom_density(aes(color=neighbourhood_group))+
coord_cartesian(xlim=c(0,8))+
labs(title='Listing Density by Minimum Nights', x='Log of the Number of Days Available')+
theme(axis.text.y=element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
legend.position = c(0.6, 0.7))
airbnb %>%
group_by(., neighbourhood_group, minimum_nights) %>%
ggplot(data = ., aes(x=log(minimum_nights, 2)))+
geom_density(aes(color=neighbourhood_group))+
coord_cartesian(xlim=c(0,8))+
labs(title='Listing Density by Minimum Nights', x='Log of the Number of Days Available')+
theme(axis.text.y=element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
legend.position = c(0.6, 0.7))+
scale_color_discrete(name='Boroughs')
airbnb %>%
group_by(., neighbourhood_group, minimum_nights) %>%
ggplot(data = ., aes(x=reorder(neighbourhood_group, minimum_nights), y=log(minimum_nights,2)))+
geom_boxplot(size=0.3)+
labs(title='Minimum Nights Offered by Borough', y='Minimum Nights Offered by Host')+
theme(axis.title.x = element_blank())
#ready for finalizing
ggplot(data = avail_data, aes(y=log(minimum_nights,2), x=neighbourhood_group)) + geom_boxplot()
ggplot(data=avail_data, aes(x=availability_365)) + geom_density(aes(color=neighbourhood_group))
ggplot(data = avail_data, aes(y=availability_365, x=neighbourhood_group)) + geom_boxplot()
ggplot(data=avail_data, aes(x=log(minimum_nights,2))) + geom_density(aes(color=neighbourhood_group)) + coord_cartesian(xlim=c(0,8)) + theme()
#minimum nights boxplot
output$reviews.boxplot<- renderPlot(
airbnb %>%
group_by(., neighbourhood_group, reviews_per_month) %>%
ggplot(data = ., aes(x=reorder(neighbourhood_group, reviews_per_month), y=reviews_per_month))+
geom_boxplot(size=0.05)+
labs(title='Reviews Per Month by Borough', y='Reviews Per Month by Listing')+
theme(axis.title.x = element_blank())
)
airbnb %>%
group_by(., neighbourhood_group, reviews_per_month) %>%
ggplot(data = ., aes(x=reorder(neighbourhood_group, reviews_per_month), y=reviews_per_month))+
geom_boxplot(size=0.3)+
labs(title='Reviews Per Month by Borough', y='Reviews Per Month by Listing')+
theme(axis.title.x = element_blank())
#worthy of finalizing
ggplot(data=neighbor_data, aes(y=tot))  + geom_boxplot() + facet_wrap(~neighbourhood_group, scale='free')
airbnb %>%
group_by(., neighbourhood_group, neighbourhood) %>% summarise(., tot=n()) %>%
ggplot(data = ., aes(x=reorder(neighbourhood_group, tot), y=tot))+
geom_boxplot(size=0.3)+
labs(title='Number of Listings in Neighbourhood', y='Neighbourhood Listing Count')+
theme(axis.title.x = element_blank())
#worthy of finalizing
ggplot(data=neighbor_data, aes(y=tot))  + geom_boxplot() + facet_wrap(~neighbourhood_group, scale='free')
airbnb %>%
group_by(., neighbourhood_group, neighbourhood) %>% summarise(., tot=n()) %>%
ggplot(data = ., aes(x=reorder(neighbourhood_group, tot), y=tot))+
geom_boxplot(size=0.3)+
facet_wrap(~neighbourhood_group, scale='free')+
labs(title='Number of Listings in Neighbourhood', y='Neighbourhood Listing Count')+
theme(axis.title.x = element_blank())
#worthy of finalizing
ggplot(data=neighbor_data, aes(x=reorder(neighbourhood,tot), y=tot))  + geom_col() + facet_wrap(~neighbourhood_group, scale='free') + theme(axis.text.y = element_blank(), axis.ticks.y = element_blank()) + coord_flip()
airbnb %>%
group_by(., neighbourhood_group, neighbourhood) %>% summarise(., tot=n()) %>%
ggplot(data = ., aes(x=reorder(neighbourhood_group, tot), y=tot))+
geom_boxplot(size=0.3)+
facet_wrap(~neighbourhood_group, scale='free')+
labs(title='Number of Listings in Neighbourhood', y='Neighbourhood Listing Count')+
theme(axis.title.x = element_blank())
airbnb %>%
group_by(., neighbourhood_group, neighbourhood) %>% summarise(., tot=n()) %>%
ggplot(data = ., aes(x=reorder(neighbourhood_group, tot), y=tot))+
geom_boxplot(size=0.3)+
facet_wrap(~neighbourhood_group, scale='free')+
labs(title='Number of Listings in Neighbourhood', y='Neighbourhood Listing Count')+
theme(axis.title.x = element_blank())
#worthy of finalizing
ggplot(data=neighbor_data, aes(y=tot))  + geom_boxplot() + facet_wrap(~neighbourhood_group, scale='free')
#worthy of finalizing
ggplot(data=neighbor_data, aes(x=reorder(neighbourhood,tot), y=tot))  + geom_col() + facet_wrap(~neighbourhood_group, scale='free') + theme(axis.text.y = element_blank(), axis.ticks.y = element_blank()) + coord_flip()
airbnb %>%
group_by(., neighbourhood_group, neighbourhood) %>% summarise(., tot=n()) %>%
ggplot(data=neighbor_data, aes(x=reorder(neighbourhood,tot), y=tot))+
geom_col()+
facet_wrap(~neighbourhood_group, scale='free')+
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank())+
labs(title='Number of Listings in Neighbourhood', y='Neighbourhood Listing Count')+
theme(axis.title.x = element_blank())+
coord_flip()
airbnb %>%
group_by(., neighbourhood_group, neighbourhood) %>% summarise(., tot=n()) %>%
ggplot(data=neighbor_data, aes(y=tot))+
geom_col()+
facet_wrap(~neighbourhood_group, scale='free')+
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank())+
labs(title='Number of Listings in Neighbourhood', y='Neighbourhood Listing Count')+
theme(axis.title.x = element_blank())+
coord_flip()
airbnb %>%
group_by(., neighbourhood_group, neighbourhood) %>% summarise(., tot=n()) %>%
ggplot(data=neighbor_data, aes(y=tot))+
geom_col()+
facet_wrap(~neighbourhood_group, scale='free')+
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank())+
labs(title='Number of Listings in Neighbourhood', y='Neighbourhood Listing Count')+
theme(axis.title.x = element_blank())+
coord_flip()
#worthy of finalizing
ggplot(data=neighbor_data, aes(x=reorder(neighbourhood,tot), y=tot))  + geom_col() + facet_wrap(~neighbourhood_group, scale='free') + theme(axis.text.y = element_blank(), axis.ticks.y = element_blank()) + coord_flip()
airbnb %>%
group_by(., neighbourhood_group, neighbourhood) %>% summarise(., tot=n()) %>%
ggplot(data=neighbor_data, aes(x=reorder(neighbourhood,tot), y=tot))+
geom_col()+
facet_wrap(~neighbourhood_group, scale='free')+
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank())+
coord_flip()
airbnb %>%
group_by(., neighbourhood_group, neighbourhood) %>% summarise(., tot=n()) %>%
ggplot(data=., aes(x=reorder(neighbourhood,tot), y=tot))+
geom_col()+
facet_wrap(~neighbourhood_group, scale='free')+
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank())+
coord_flip()
airbnb %>%
group_by(., neighbourhood_group, neighbourhood) %>% summarise(., tot=n()) %>%
ggplot(data=., aes(x=reorder(neighbourhood,tot), y=tot))+
geom_col()+
facet_wrap(~neighbourhood_group, scale='free')+
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank())+
labs(title='Number of Listings in Neighbourhood', y='Neighbourhood Listing Count')+
theme(axis.title.x = element_blank())+
coord_flip()
airbnb %>%
group_by(., neighbourhood_group, neighbourhood) %>% summarise(., tot=n()) %>%
ggplot(data=., aes(x=reorder(neighbourhood,tot), y=tot))+
geom_col()+
facet_wrap(~neighbourhood_group, scale='free')+
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank())+
labs(title='Number of Listings in Neighbourhood', x='Neighbourhood Listing Count')+
theme(axis.title.x = element_blank())+
coord_flip()
runApp()
runApp()
airbnb %>%
group_by(., neighbourhood_group, neighbourhood, number_of_reviews) %>% summarise(., tot=n()) %>%
ggplot(data=., aes(x=reorder(neighbourhood,tot), y=tot))+
geom_col()+
facet_wrap(~neighbourhood_group, scale='free')+
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank())+
labs(title='Number of Listings in Neighbourhood', x='Neighbourhood Listing Count')+
theme(axis.title.x = element_blank())+
coord_flip()
airbnb %>%
group_by(., neighbourhood_group, neighbourhood, number_of_reviews) %>% summarise(., tot=n())
dat <- airbnb %>%
group_by(., neighbourhood_group, neighbourhood, number_of_reviews) %>% summarise(., tot=n())
View(dat)
dat <- airbnb %>%
group_by(., neighbourhood_group, number_of_reviews) %>% summarise(., tot=n())
View(dat)
dat <- airbnb %>%
group_by(., neighbourhood, number_of_reviews) %>% summarise(., tot=n())
View(dat)
dat <- airbnb %>%
group_by(., number_of_reviews, neighbourhood_group) %>% summarise(., tot=n())
View(dat)
dat <- airbnb %>%
group_by(., neighbourhood, neighbourhood_group) %>% summarise(., tot=n(number_of_reviews))
dat <- airbnb %>%
group_by(., neighbourhood_group, neighbourhood) %>% summarise(., tot=n())
View(dat)
dat <- airbnb %>%
group_by(., neighbourhood_group, neighbourhood, number_of_reviews) %>% summarise(., tot=n())
View(dat)
airbnb %>%
group_by(., neighbourhood_group, neighbourhood, number_of_reviews) %>% summarise(., tot=n()) %>%
ggplot(data=., aes(x=reorder(number_of_reviews,tot), y=tot))+
geom_col()+
facet_wrap(~neighbourhood_group, scale='free')+
theme(axis.text.y = element_blank(),
axis.ticks.y = element_blank())+
labs(title='Number of Listings in Neighbourhood', x='Neighbourhood Listing Count')+
theme(axis.title.x = element_blank())+
coord_flip()
?deployApp
dat <- airbnb %>%
group_by(., neighbourhood_group, number_of_reviews) %>% summarise(., tot=n())
View(dat)
airbnb %>%
group_by(., neighbourhood_group, number_of_reviews) %>% summarise(., tot=n()) %>%
ggplot(data=., aes(x=reorder(number_of_reviews,tot), y=tot))+
geom_density(aes(color=neighbourhood_group))+
labs(title='Listing Density by Listing Length', x='Character Length')+
#coord_cartesian(xlim=c(0,110))+
theme(axis.text.y=element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
legend.position = c(0.75, 0.7))+
scale_color_discrete(name = "Boroughs")
dat <- airbnb %>%
group_by(., neighbourhood_group, number_of_reviews) %>% summarise(., tot=n())
View(dat)
airbnb %>%
group_by(., neighbourhood_group, number_of_reviews) %>% summarise(., tot=n()) %>%
ggplot(data=., aes(x=number_of_reviews, y=tot))+
geom_density(aes(color=neighbourhood_group))+
labs(title='Listing Density by Listing Length', x='Character Length')+
#coord_cartesian(xlim=c(0,110))+
theme(axis.text.y=element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
legend.position = c(0.75, 0.7))+
scale_color_discrete(name = "Boroughs")
airbnb %>%
group_by(., neighbourhood_group, number_of_reviews) %>% summarise(., tot=n()) %>%
ggplot(data=., aes(y=tot))+
geom_density(aes(color=neighbourhood_group))+
labs(title='Listing Density by Listing Length', x='Character Length')+
#coord_cartesian(xlim=c(0,110))+
theme(axis.text.y=element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
legend.position = c(0.75, 0.7))+
scale_color_discrete(name = "Boroughs")
airbnb %>%
group_by(., neighbourhood_group, number_of_reviews) %>% summarise(., tot=n()) %>%
ggplot(data=., aes(y=tot))+
geom_density(aes(x=number_of_reviews, color=neighbourhood_group))+
labs(title='Listing Density by Listing Length', x='Character Length')+
#coord_cartesian(xlim=c(0,110))+
theme(axis.text.y=element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
legend.position = c(0.75, 0.7))+
scale_color_discrete(name = "Boroughs")
airbnb %>%
group_by(., neighbourhood_group, number_of_reviews) %>% summarise(., tot=n()) %>%
ggplot(data=., aes(x=number_of_reviews))+
geom_density(aes(color=neighbourhood_group))+
labs(title='Listing Density by Listing Length', x='Character Length')+
#coord_cartesian(xlim=c(0,110))+
theme(axis.text.y=element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
legend.position = c(0.75, 0.7))+
scale_color_discrete(name = "Boroughs")
airbnb %>%
group_by(., neighbourhood_group, number_of_reviews) %>% summarise(., tot=n()) %>%
ggplot(data=., aes(x=number_of_reviews))+
geom_density(aes(color=neighbourhood_group))+
labs(title='Listing Density by Listing Length', x='Character Length')+
theme(axis.text.y=element_blank(),
axis.ticks.y = element_blank(),
#axis.title.y = element_blank(),
legend.position = c(0.75, 0.7))+
scale_color_discrete(name = "Boroughs")
airbnb %>%
group_by(., neighbourhood_group, number_of_reviews) %>% summarise(., tot=n()) %>%
ggplot(data=., aes(x=number_of_reviews))+
geom_density(aes(color=neighbourhood_group))+
labs(title='Listing Density by Listing Length', x='Character Length')+
theme(#axis.text.y=element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
legend.position = c(0.75, 0.7))+
scale_color_discrete(name = "Boroughs")
runApp()
leaflet(data=airbnb[7:8]) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addMarkers(clusterOptions = markerClusterOptions(),
label = airbnb$name)
leaflet(data=airbnb[7:8]) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addMarkers(clusterOptions = markerClusterOptions(),
label = airbnb$name)
leaflet(data=airbnb[7:8]) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addMarkers(clusterOptions = markerClusterOptions(),
label = airbnb$name)
leaflet(data=airbnb[7:8]) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(radius= 0.0001,
fillOpacity = 0.01,
fill = 0.01,
color = ~ifelse(airbnb$neighbourhood_group=='Manhattan', 'navy',
ifelse(airbnb$neighbourhood_group=='Brooklyn', 'red',
ifelse(airbnb$neighbourhood_group=='Staten Island', 'green',
ifelse(airbnb$neighbourhood_group=='Bronx', 'orange', 'purple'))))
)
airbnb %>%
group_by(., neighbourhood, neighbourhood_group) %>%
summarise(., tot=n(), avg_lat=mean(latitude), avg_long=mean(longitude)) %>%
leaflet(data=.) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(lng=~avg_long,
lat=~avg_lat,
label=~neighbourhood,
radius = 0.01,
fillOpacity = 0.01,
fill = 0.01,
color = ~ifelse(neighbourhood_group=='Manhattan', 'navy',
ifelse(neighbourhood_group=='Brooklyn', 'red',
ifelse(neighbourhood_group=='Staten Island', 'green',
ifelse(neighbourhood_group=='Bronx', 'orange', 'purple')))),
weight= ~log(tot, 2)
)
#worthy of finalizing
ggplot(data=neighbor_data, aes(x=reorder(neighbourhood,tot), y=tot))  + geom_col() + facet_wrap(~neighbourhood_group, scale='free') + theme(axis.text.y = element_blank(), axis.ticks.y = element_blank()) + coord_flip()
pricey_data <- airbnb %>% group_by(., price, neighbourhood, neighbourhood_group) %>% arrange(., desc(price)) %>% summarise(., tot=n())
ggplot(data=pricey_data, aes(x=neighbourhood, y=price)) + geom_boxplot(size=0.5) + facet_wrap(~neighbourhood_group, scale='free') + coord_flip()
ggplot(data=pricey_data, aes(x=price)) + geom_density(aes(color=neighbourhood_group)) + coord_cartesian(xlim=c(0,1200))
#shinyApp(ui = ui, server = server)
deployApp(appDir=getwd())
library(shiny)
#import libraries
library(shinydashboard)
library(tidyverse)
library(reshape2)
library(data.table)
library(leaflet)
library(htmltools)
library(rsconnect)
#read in the file
airbnb = fread(file='new-york-city-airbnb-open-data/AB_NYC_2019.csv', stringsAsFactors = FALSE)
#cast NA's in reviews_per_month column as zeros
airbnb$reviews_per_month[is.na(airbnb$reviews_per_month)] <- 0
#remove rows with zero price
airbnb <- airbnb %>%
filter(., price > 0)
#remove rows associated with inactive listing at the time of data collection
airbnb <- airbnb %>%
filter(., availability_365 > 0)
#filter out listings with no titles and assign the character count of the remaining to name.length
airbnb = filter(airbnb, name!='')
airbnb['name.length'] = nchar(airbnb$name)
# create variable with colnames as choice
choice <- colnames(airbnb)[-1]
#Removing the upper half of the correlation matrix entries
get_tri <- function(corrmatrix){
corrmatrix[lower.tri(corrmatrix)] <- NA
return(corrmatrix)
}
#Sort the correlation matrix in ascending order of correlation (not functioning presently)
reorder_cordata <- function(corrmatrix){
dmatrix <- as.dist((1-corrmatrix)/2)
hc <- hclust(dmatrix)
corrmatrix <- corrmatrix[hc$order, hc$order]
}
#Label outlying points in box and whisker plots (didn't have time to implement)
is_outlier <- function(x) {
return(x < quantile(x, 0.25) - 1.5 * IQR(x) | x > quantile(x, 0.75) + 1.5 * IQR(x))
}
ui <- fluidPage(shinyUI(
dashboardPage(skin='purple',
dashboardHeader(title = 'To Be or Not to Airbnb: An E.D.A. of New York City Airbnb Data',
titleWidth = 825),
dashboardSidebar(
sidebarMenu(id='tabs',
menuItem("Charts", tabName = "charts", icon = icon("bar-chart-o")),
menuItem("Map", tabName = "map", icon = icon("map")),
menuItem("Data", tabName = "data", icon = icon("code")),
menuItem("Video", icon = icon("file-code-o"),
href = "https://www.youtube.com/watch?v=HkRnPPUqveI")
),
textOutput('res')),
dashboardBody(
tags$head(tags$style(HTML('
.main-header .logo {
font-family: "Georgia", Times, "Times New Roman", serif;
font-weight: bold;
font-size: 24px;
}
'))),
tabItems(
tabItem(tabName = "charts",
fluidRow(
tabBox(
title = tagList(shiny::icon("bar-chart-o"), 'Box Plots and Histograms'),
id = 'tabset1',
tabPanel('Tab 1', plotOutput("listing.boxplot")),
tabPanel('Tab 2', plotOutput('avail.boxplot')),
tabPanel('Tab 3', plotOutput('price.by.room.boxplot')),
tabPanel('Tab 4', plotOutput('night.boxplot')),
tabPanel('Tab 5', plotOutput('neighbourhood.count')),
tabPanel('Tab 6', plotOutput('reviews.boxplot')),
tabPanel('Tab 7', plotOutput('neighbourhood.count.hist'))
),
tabBox(
title = tagList(shiny::icon("bar-chart-o"), 'Density Plots'),
id = 'tabset2',
tabPanel('Tab 1', plotOutput('listing.char.density')),
tabPanel('Tab 2', plotOutput('avail.density')),
tabPanel('Tab 3', plotOutput('night.density')),
tabPanel('Tab 4', plotOutput('price.density')),
tabPanel('Tab 5', plotOutput('review.density'))
))),
tabItem(tabName = "data",
fluidRow(box(DT::dataTableOutput("table"), width = 12))
),
tabItem(tabName = 'map',
fluidRow(
tabBox(
title = tagList(shiny::icon("map"), 'Cartographic Plots'),
id = 'tabset1',
tabPanel('Tab 1', leafletOutput("nycclust")),
tabPanel('Tab 2', leafletOutput('nyccirc')),
tabPanel('Tab 3', leafletOutput('nyccirclabel')),
tabPanel('Tab 4', plotOutput('cor.heatmap')),
width=12))
)
)
)
runApp()
runApp()
#shinyApp(ui = ui, server = server)
deployApp(appDir=getwd())
leaflet(data=airbnb[7:8]) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addCircleMarkers(radius= 0.0001,
fillOpacity = 0.01,
fill = 0.01,
color = ~ifelse(airbnb$neighbourhood_group=='Manhattan', 'navy',
ifelse(airbnb$neighbourhood_group=='Brooklyn', 'red',
ifelse(airbnb$neighbourhood_group=='Staten Island', 'green',
ifelse(airbnb$neighbourhood_group=='Bronx', 'orange', 'purple'))))
)
